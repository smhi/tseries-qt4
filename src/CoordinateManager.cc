/*
 * CoordinateManager.cc
 *
 *  Created on: Mar 16, 2010
 *      Author: juergens
 */

/*
 $Id$

 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include "CoordinateManager.h"
#include <math.h>
#include <iostream>

using namespace std;

CoordinateManager::CoordinateManager(QWidget* parent,
    Qt::Orientation orient, QString lab) : QWidget(parent)
{
  precision   = 1000;
  slider      = new QSlider(orient,parent);
  edit        = new QLineEdit(parent);
  sliderLabel = new QLabel(lab,parent);
  editLabel   = new QLabel(lab+":",parent);


  slider->setTickPosition(QSlider::TicksBothSides);
  connect(edit,SIGNAL(textEdited(const QString&)),this, SLOT(editValue(const QString&)));
  connect(edit,SIGNAL(editingFinished()), this, SIGNAL( coordinatesChanged()));

  connect(slider,SIGNAL( valueChanged( int) ),this, SLOT(setValueBySlider(int)));
  connect(slider,SIGNAL( sliderReleased() ),this, SIGNAL(coordinatesChanged()));

}
float CoordinateManager::getValue()
{
  return float(value)/float(precision);
}

void CoordinateManager::setValue(float v)
{
  float buf=v*float(precision);
  value=int(buf);
  slider->setValue(value);
  setValueToEdit();
}

void CoordinateManager::setValueToEdit()
{
  float val = getValue();
  float pre = log10f(float(precision));

  QString qval;

  qval.setNum( val,'f', int(pre));
  edit->setText(qval);
}


void CoordinateManager::setValueBySlider(int v)
{
  value=v;
  setValueToEdit();
}

void CoordinateManager::editValue(const QString& qv)
{
  float v = qv.toFloat();
  value=int(v*float(precision));
  slider->setTracking(false);
  slider->setValue(value);
  slider->setTracking(true);
}


void CoordinateManager::setRange(int mi, int ma)
{
  if(mi>ma) return;
  min=mi*precision;
  max=ma*precision;
  slider->setRange(min,max);
  int range=max -min;
  int ticks=range/4;


  slider->setTickInterval(ticks);

  if(value <= max && value >= min) return;

  if(value > max ) value = max;
  if(value < min ) value = min;
  slider->setTracking(false);
  slider->setValue(value);
  slider->setTracking(true);
  setValueToEdit();

}


void CoordinateManager::setPrecision(int p)
{
  if(precision==p) return;
    value=value*p/precision;
    precision=p;
    slider->setRange(min*precision,max*precision);
    slider->setValue(value*precision);
}









