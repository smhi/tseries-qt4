/*
 * FimexTab.h
 *
 *  Created on: Mar 16, 2010
 *      Author: juergens
 */

#ifndef FIMEXTAB_H_
#define FIMEXTAB_H_

/*
 Copyright (C) 2006 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 email: diana@met.no

 This file is part of generated by met.no

 This is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Tseries; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

#include <QLayout>
#include <QWidget>
#include <QComboBox>
#include <QVBoxLayout>
#include <QDial>
#include <QLabel>
#include <QPushButton>
#include <QTreeView>
#include <QString>
#include <QStandardItemModel>
#include <QSortFilterProxyModel>
#include <QAction>
#include "WdbBookmarkTools.h"
#include "ClearLineEdit.h"
#include "FetchStations.h"

#include <puDatatypes/miCoordinates.h>

#include <string>
#include <vector>


class FilterProxyModel : public QSortFilterProxyModel {
public:
  FilterProxyModel(QObject* parent=0)  : QSortFilterProxyModel(parent) { }
protected:
  bool filterAcceptsRow(int row, const QModelIndex &parent) const;
};





class FimexTab : public QWidget {
  Q_OBJECT

private:
  QComboBox   * modell;     // list of models
  QComboBox   * stylel;     // list of styles (meteogram etc.)
  QComboBox   * runl;       // list of runs

  QTreeView   * bookmarks;
  QPushButton * cacheQueryButton;
  QAction     * cutAction;
  QAction     * pasteAction;
  QAction     * copyAction;
  QAction     * delAction;

  ClearLineEdit   * filter;    // filter stations
  FetchStations   * fetchstations; // findstations on the web

  bool                activeCacheRequest;
  WdbBookmarkTools    bookmarkTools;
  QStandardItemModel* model;
  FilterProxyModel*   proxyModel;
  std::string         variableBookmarkfile;
  bool recordingPositions;
  bool addToRecord;
  float latitude;
  float longitude;


public:
  FimexTab(QWidget*,QString language);

  QString setStyles(const QStringList& qlist);
  void setWdbGeometry(int minLon, int maxLon, int minLat, int maxLat);

  miCoordinates coordinates() const;
  void setActiveCacheRequest(bool b) { activeCacheRequest=b;}
  bool getActiveCacheRequest() const { return activeCacheRequest;}
  void writeBookmarks();
  QList<QStringList> getPoslist();
  bool findPosition(QString newpos, QModelIndex& idx);
  void selectFirstPosition(); // find the first position i a filter

  std::string getExpandedDirs();
  void setExpandedDirs(std::string);
  std::vector<std::string> allFimexPositions() {return  bookmarkTools.getAllBookmarks();}

private Q_SLOTS:
  void coordinatesChanged();
  void changeModel(const QString&);
  void changeRun(const QString&);
  void bookmarkClicked(QModelIndex idx);
  void poslistChanged(const QModelIndex &);
  void showContextMenu(const QPoint& pos);
  void cut();
  void copy();
  void paste();
  void remove();
  void filterBookmarks(const QString&);
  void searchResult(const std::vector<std::string>&);

public Q_SLOTS:
  void setCoordinates(float lon, float lat, QString name="");
  void setModel(QString model);
  void setStyle(QString style);
  void setRun(QString run);

  void setModels(const QStringList& newmodels);
  void setRuns(const QStringList& newmodels);
  void addBookmarkFolder();
  void changePosition(QString);
  void recordToggled(bool);

  void search(QString);

  void expandAll();
  void collapseAll();



Q_SIGNALS:
    void changestyle(const QString&);
    void changemodel(const QString&);
    void changerun(const QString&);
    void changeCoordinates(float lon, float lat,QString name);
    void changePoslist();
    void newPoslist();
};

// --------------------------------------------------------------

#endif /* FIMEXTAB_H_ */
